% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_elections_data.R
\name{get_election_data}
\alias{get_election_data}
\title{Function to get jointly information on polling
stations and votes for candidacies.}
\usage{
get_election_data(
  type_elec,
  year = 2019,
  month = 4,
  date = NULL,
  election_data = NULL,
  ballots_data = NULL,
  col_id_elec = "id_elec",
  col_id_poll_station = "id_INE_poll_station",
  prec_round = 3,
  short_version = TRUE,
  repo_url = "https://github.com/dadosdelaplace/pollspain-data/blob/main",
  file_ext = ".rda",
  verbose = TRUE
)
}
\arguments{
\item{type_elec}{Type elections for which data is available.
It should be one of the following values: "referendum",
"congress", "senate", "local", "cabildo" (Canarian council)
or "EU".}

\item{year}{A vector or single value representing the years of the
elections to be considered.}

\item{month}{A vector or single value representing the months of
the elections to be considered. Please, check (refer to
\code{dates_elections_spain}) that elections of the specified type
are available for the provided year and month.}

\item{date}{A vector or single value representing the dates of
the elections to be considered. If date was provided, it should be
in format \%Y-\%m-\%d (e.g., '2000-01-01'). Defaults to \code{NULL}.
If no date was provided, \code{month} and \code{year} should be
both numerical variables.}

\item{election_data}{A database containing general election data
already provided (by other functions or by the user). Database
should contain a \code{col_id_elec} column.
Defaults to \code{NULL}.}

\item{ballots_data}{A database containing ballots data for
the different candidacies, already provided (by other functions or
by the user). Database should contain a
\code{col_id_poll_station} column. Defaults to \code{NULL}.}

\item{col_id_elec}{Column name in \code{election_data} to uniquely
identify the elections. Defaults to \code{"id_elec"}.}

\item{col_id_poll_station}{Column name in \code{ballots_data} to
uniquely identify poll stations. Defaults to
\code{"id_INE_poll_station"}.}

\item{prec_round}{Rounding accuracy. Defaults to
\code{prec_round = 3}.}

\item{short_version}{Flag to indicate whether it should be returned
a short version of the data (just key variables) or not.
Defaults to \code{TRUE}.}

\item{repo_url}{A string with the url in which the raw data can be
found. Defaults to
\url{https://github.com/dadosdelaplace/pollspain-data/blob/main}.}

\item{file_ext}{A string with the file's extension. Defaults to
\code{".rda"}.}

\item{verbose}{Flag to indicate whether detailed messages should
be printed during execution. Defaults to \code{TRUE}.}
}
\value{
A tibble with rows corresponding to municipalities for
each election, including the following variables:
\item{id_elec}{election's id constructed from the election code
\code{cod_elec} and date \code{date_elec}.}
\item{cod_elec}{code representing the type of election:
\code{"01"} (referendum), \code{"02"} (congress),
\code{"03"} (senate), \code{"04"} (local elections),
\code{"06"} (cabildo - Canarian council - elections), \code{"07"}
(European Parliament elections). Variable available only for
long version.}
\item{type_elec}{type of election.}
\item{date_elec}{date of the election.}
\item{id_INE_mun}{municipality ID constructed from the
ccaa-prov-mun codes provided by INE.}
\item{id_INE_poll_station}{poll station's id constructed from the
ccaa-prov-municipality and poll station codes.}
\item{cod_INE_ccaa, ccaa}{codes and names for regions (ccaa)
to which the municipalities belong. Codes available only for
long version.}
\item{cod_INE_prov, prov}{codes and names for the provinces to which
the municipalities belong. Codes available only for long version.}
\item{cod_INE_mun, mun}{code, and name for
municipalities. Codes available only for long version.}
\item{cod_mun_district, cod_sec, cod_poll_station}{codes for the
municipal district, census tract and poll station. Codes available
only for long version.}
\item{census_counting_mun}{population eligible to vote after claims
at municipality level.}
\item{ballots_1, turnout_1}{number of total ballots and turnout
percentage in the first round. Variables available only for
long version.}
\item{ballots_2, turnout_2}{number of total ballots and turnout
percentage in the second round (if applicable). Variables available
only for long version}
\item{blank_ballots, invalid_ballots}{blank and invalid ballots.}
\item{party_ballots, valid_ballots, total_ballots}{ballots to
candidacies/parties, valid ballots (sum of \code{blank_ballots} and
\code{party_ballots}) and total ballots (sum of
\code{valid_ballots} and \code{invalid_ballots}).}
\item{turnout}{final turnout percentage.}
\item{porc_valid, porc_invalid, porc_parties, porc_blank}{perc (\%)
values of \code{valid_ballots}, \code{invalid_ballots},
\code{party_ballots} and \code{blank_ballots}.}
\item{n_poll_stations}{number of polling stations.}
\item{pop_res_mun}{population census of residents (CER + CERA) at
municipality level.}
\item{census_counting_mun}{population eligible to vote after
claims at municipality level.}
\item{id_candidacies}{id for candidacies (at province level).}
\item{id_candidacies_ccaa, id_candidacies_nat}{id for
candidacies (at region - ccaa - and national level).}
\item{abbrev_candidacies, name_candidacies}{acronym and full name
of the candidacies.}
\item{ballots}{number of ballots obtained for each candidacy at
each poll station.}
}
\description{
Import and preprocess poll stations info but jointly
with the preprocessed candidacies data, for given election types
and dates, at poll station level. This function supports both
single values and vector inputs for fetching and combining data
for multiple elections at once.
}
\details{
This function fetches municipal-level data for the
specified elections by downloading the corresponding \code{.rda} files
from GitHub \url{https://github.com/dadosdelaplace/pollspain-data}
(directly downloaded from MIR website) and processing them into a
tidy format. It automatically handles the download, loading, and
merging of data across multiple election periods as specified by
the user.
}
\examples{

## Correct examples

# Congress elections in April 2019
# Fetch elections data for the congress elections in April 2019
elections_data1 <- get_election_data("congress", 2019, 4)

# Fetch elections data for the congress and senate elections
# in April 2019 in a long version
elections_data2 <-
  get_election_data(c("congress", "senate"), 2019, 4,
                    short_version = FALSE)

# Fetch elections data for congress elections in Nov 2019,
# April 2019, and June 2016
combined_elections_data <-
  get_election_data(c("congress", "congress"),
                    c(2019, 2016), c(11, 6))

# Example usage providing date instead of month and year
date_example <- get_election_data("congress", date = "2016-06-26")

# Example usage providing external tables
election_data <- import_poll_station_data("congress", 2019, 4)
ballots_data <- import_candidacies_data("congress", 2019, 4)
join_data <-
  get_election_data("congress", 2019, 4,
                     election_data = election_data,
                     ballots_data = ballots_data)

# Example usage providing external tables with different
# column names
election_data <-
  import_poll_station_data("congress", 2019, 4) |>
  dplyr::rename(invent_1 = id_elec, invent_2 = id_INE_poll_station)
ballots_data <-
  import_candidacies_data("congress", 2019, 4) |>
  dplyr::rename(invent_1 = id_elec, invent_2 = id_INE_poll_station)
join_data <-
  get_election_data("congress", 2019, 4,
                    election_data = election_data,
                    ballots_data = ballots_data,
                    col_id_elec = "invent_1",
                    col_id_poll_station = "invent_2")

# ----
# Incorrect examples
# ----

\dontrun{
# Wrong examples

# Invalid election type: "national" is not a valid election type
get_election_data("national", 2019, 4)

# Invalid election: no congress elections are available in 5-2019.
# Please check dataset dates_elections_spain
get_election_data("congress", 2019, 5)

# Invalid date format: date should be in \%Y-\%m-\%d format
get_election_data("congress", date = "26-06-2016")

# Invalid short version flag: short_version should be a
# logical variable
get_election_data("congress", 2019, 4, short_version = "yes")

# Invalid include_candidates flag: include_candidates should be
# a logical variable
get_election_data("congress", 2019, 4, include_candidates = "no")

# Invalid key columns: col_id_elec and col_id_poll should be
# columns included in datasets election_data and ballots_data
election_data <- import_poll_station_data("congress", 2019, 4)
ballots_data <- import_candidacies_data("congress", 2019, 4)
get_election_data("congress", 2019, 4,
                   election_data = election_data,
                   ballots_data = ballots_data,
                   col_id_elec = "invent_1",
                   col_id_poll_station = "invent_2")
}

}
\author{
Javier Álvarez-Liébana and David Pereiro-Pol.
}
\keyword{get_elections_data}
