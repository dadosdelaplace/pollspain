% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_elections_data.R
\name{aggregate_election_data}
\alias{aggregate_election_data}
\title{Aggregate elections data at provided level (ccaa, prov, etc)}
\usage{
aggregate_election_data(
  election_data,
  level = "all",
  by_parties = FALSE,
  col_id_elec = "id_elec",
  col_id_poll_station = "id_INE_poll_station",
  cols_mun_var = c("pop_res_mun", "census_counting_mun"),
  col_id_candidacies = "id_candidacies_nat",
  cols_names_candidacies = c("abbrev_candidacies", "name_candidacies"),
  prec_round = 3,
  verbose = TRUE
)
}
\arguments{
\item{election_data}{A database containing general election data
already provided (by other functions or by the user). Database
should contain a \code{col_id_elec} column.
Defaults to \code{NULL}.}

\item{level}{A string providing the level of aggregation at which
the data is to be provided. The allowe values are the following:
'all', 'ccaa', 'prov', 'mun', 'mun_district', 'sec' or
'poll_station'. Defaults to \code{"all"}.}

\item{by_parties}{A flag indicates whether user wants a summary by
candidacies/parties or just global results at given \code{level}.
Defaults to \code{FALSE}.}

\item{col_id_elec}{Column name in \code{election_data} to uniquely
identify the elections. Defaults to \code{"id_elec"}.}

\item{col_id_poll_station}{Column name in \code{ballots_data} to
uniquely identify poll stations. Defaults to
\code{"id_INE_poll_station"}.}

\item{cols_mun_var}{A vector of variable names that, in their raw
version, are only available at the municipal level (or higher).
Defaults to \code{c("pop_res_mun", "census_counting_mun")}.}

\item{col_id_candidacies}{A string indicating the name of the
column that uniquely identifies the candidacies. Defaults to
\code{"id_candidacies"}.}

\item{cols_names_candidacies}{A string indicating the name of the
column containg the names and/or acronyms of candidacies.
Defaults to \code{c("abbrev_candidacies", "name_candidacies")}.}

\item{prec_round}{Rounding accuracy. Defaults to
\code{prec_round = 3}.}

\item{verbose}{Flag to indicate whether detailed messages should
be printed during execution. Defaults to \code{TRUE}.}
}
\value{
A tibble with rows corresponding to municipalities for
each election, including the following variables:
\item{id_elec}{election's id constructed from the election code
\code{cod_elec} and date \code{date_elec}.}
\item{cod_elec}{code representing the type of election:
\code{"01"} (referendum), \code{"02"} (congress),
\code{"03"} (senate), \code{"04"} (local elections),
\code{"06"} (cabildo - Canarian council - elections), \code{"07"}
(European Parliament elections).}
\item{type_elec}{type of election.}
\item{date_elec}{date of the election.}
\item{id_INE_poll_station}{poll station's id constructed from the
ccaa-prov-municipality and poll station codes.}
\item{id_INE_mun}{municipality ID constructed from the
ccaa-prov-mun codes provided by INE.}
\item{cod_INE_ccaa, ccaa}{codes and names for regions (ccaa)
to which the municipalities belong.}
\item{cod_INE_prov, prov}{codes and names for the provinces to
which the municipalities belong.}
\item{cod_INE_mun, mun}{code, and name for
municipalities.}
\item{cod_mun_district, cod_sec, cod_poll_station}{codes for the
municipal district, census tract and poll station.}
\item{ballots_1, turnout_1}{number of total ballots and turnout
percentage in the first round.}
\item{ballots_2, turnout_2}{number of total ballots and turnout
percentage in the second round (if applicable).}
\item{blank_ballots, invalid_ballots}{blank and invalid ballots.}
\item{party_ballots, valid_ballots, total_ballots}{ballots to
candidacies/parties, valid ballots (sum of \code{blank_ballots} and
\code{party_ballots}) and total ballots (sum of
\code{valid_ballots} and \code{invalid_ballots}).}
\item{turnout}{final turnout percentage.}
\item{porc_valid, porc_invalid, porc_parties, porc_blank}{perc (\%)
values of \code{valid_ballots}, \code{invalid_ballots},
\code{party_ballots} and \code{blank_ballots}.}
\item{n_poll_stations}{number of polling stations.}
\item{pop_res_mun}{population census of residents (CER + CERA) at
municipality level.}
\item{census_counting_mun}{population eligible to vote after
claims at municipality level.}
\item{id_candidacies}{id for candidacies (at province level).}
\item{id_candidacies_ccaa, id_candidacies_nat}{id for
candidacies (at region - ccaa - and national level).}
\item{abbrev_candidacies, name_candidacies}{acronym and full name
of the candidacies.}
\item{ballots}{number of ballots obtained for each candidacy at
each poll station.}
}
\description{
pending...
}
\details{
This function fetches municipal-level data for the
specified elections by downloading the corresponding \code{.rda} files
from GitHub \url{https://github.com/dadosdelaplace/pollspain-data}
(directly downloaded from MIR website) and processing them into a
tidy format. It automatically handles the download, loading, and
merging of data across multiple election periods as specified by
the user.
}
\examples{

\dontrun{
## Correct examples

# Congress elections in April 2019
# Fetch elections data for the congress elections in April 2019
elections_data1 <- join_election_data("congress", 2019, 4)

# Fetch join_election_data("congress", 2019, 4, prec_round = 7)
# data for the congress elections in April 2019
# with percentages rounded to 7 decimals
elections_data2 <-
  join_election_data("congress", 2019, 4, prec_round = 7)

# Fetch elections data for the congress and senate elections in
# April 2019 in a short version
elections_data3 <-
  join_election_data(c("congress", "senate"), 2019, 4, short_version = TRUE)

# Example usage to combine data from different elections into one table
# Fetch elections data for congress elections in Nov 2019 and June 2016
combined_elections_data <-
  join_election_data(c("congress", "congress"),
                     c(2019, 2016), c(11, 6))

# Example usage providing date instead of month and year
date_example <- join_election_data("congress", date = "2016-06-26")

# Example usage providing external tables
election_data <- import_poll_station_data("congress", 2019, 4)
ballots_data <- import_candidacies_data("congress", 2019, 4)
join_election_data("congress", 2019, 4,
                   election_data = election_data,
                   ballots_data = ballots_data)

# Example usage providing external tables with different
# column names
election_data <-
  import_poll_station_data("congress", 2019, 4) |>
  dplyr::rename(invent_1 = id_elec, invent_2 = id_INE_poll_station)
ballots_data <-
  import_candidacies_data("congress", 2019, 4) |>
  dplyr::rename(invent_1 = id_elec, invent_2 = id_INE_poll_station)
join_data <-
  join_election_data("congress", 2019, 4,
                     election_data = election_data,
                     ballots_data = ballots_data,
                     col_id_elec = "invent_1",
                     col_id_poll = "invent_2")

# ----
# Incorrect examples
# ----

# Wrong examples

# Invalid election type: "national" is not a valid election type
join_election_data("national", 2019, 4)

# Invalid election: no congress elections are available in 5-2019.
# Please check dataset dates_elections_spain
join_election_data("congress", 2019, 5)

# Invalid date format: date should be in \%Y-\%m-\%d format
join_election_data("congress", date = "26-06-2016")

# Invalid short version flag: short_version should be a
# logical variable
join_election_data("congress", 2019, 4, short_version = "yes")

# Invalid include_candidates flag: include_candidates should be a
# logical variable
join_election_data("congress", 2019, 4, include_candidates = "no")

# Invalid key columns: col_id_elec and col_id_poll should be
# columns included in datasets election_data and ballots_data
election_data <- import_poll_station_data("congress", 2019, 4)
ballots_data <- import_candidacies_data("congress", 2019, 4)
join_election_data("congress", 2019, 4,
                   election_data = election_data,
                   ballots_data = ballots_data,
                   col_id_elec = "invent_1",
                   col_id_poll = "invent_2")
}

}
\author{
Javier Álvarez-Liébana and David Pereiro-Pol.
}
\keyword{get_elections_data}
